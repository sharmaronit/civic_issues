
export interface CivicReport {
  id: string
  issueType: string
  note?: string
  locationText: string
  coords?: { lat: number; lng: number }
  capturedAt: string
  imageUrl?: string
  certificateUrl?: string
  userId?: string
  reportUrl: string
  locationMapUrl?: string
  footerCreditName?: string
}

export interface GitHubIssueData {
  title: string
  body: string
  labels: string[]
}

export class GitHubStorageService {
  private repoOwner: string
  private repoName: string
  private baseUrl: string

  constructor(repoOwner: string = 'ScienceArtist', repoName: string = 'civic-issues-database') {
    this.repoOwner = repoOwner
    this.repoName = repoName
    this.baseUrl = `https://api.github.com/repos/${repoOwner}/${repoName}`
  }

  /**
   * Convert civic report to GitHub issue format
   */
  private reportToIssue(report: CivicReport): GitHubIssueData {
    const title = `${report.issueType} Report - ${report.locationText.split(',')[0]}` // First part of location
    
    const body = [
      `**Issue Type:** ${report.issueType}`,
      `**Location:** ${report.locationText}`,
      `**Date:** ${new Date(report.capturedAt).toLocaleString('en-IN')}`,
      `**User ID:** ${report.userId || 'anonymous'}`,
      `**Report URL:** ${report.reportUrl}`,
      report.note ? `**Notes:** ${report.note}` : '',
      report.coords ? `**Coordinates:** ${report.coords.lat}, ${report.coords.lng}` : '',
      report.locationMapUrl ? `**Maps URL:** ${report.locationMapUrl}` : '',
      report.footerCreditName ? `**Credit:** ${report.footerCreditName}` : '',
      report.imageUrl ? `**Issue Image:** ${report.imageUrl}` : '',
      report.certificateUrl ? `**Certificate:** ${report.certificateUrl}` : '',
      '',
      '---',
      `*Generated by reportcard.fun on ${new Date().toLocaleString('en-IN')}*`
    ].filter(Boolean).join('\n')

    const labels = [
      report.issueType.toLowerCase().replace(/\s+/g, '-'),
      report.locationText.split(',')[0].toLowerCase().replace(/\s+/g, '-'),
      new Date(report.capturedAt).getFullYear().toString(),
      'civic-issue',
      'auto-generated'
    ]

    return { title, body, labels }
  }

  /**
   * Store a civic report as a GitHub issue
   * Uses secure server-side API route to avoid exposing tokens
   */
  async storeReport(report: CivicReport): Promise<{ success: boolean; issueNumber?: number; error?: string }> {
    try {
      // Use secure server-side API route
      const response = await fetch('/api/github', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ report })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to store report')
      }

      const result = await response.json()
      
      return {
        success: result.success,
        issueNumber: result.issueNumber,
        error: undefined
      }
    } catch (error) {
      console.error('Error storing report:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  /**
   * Get analytics data from the analytics repository
   */
  async getAnalytics(): Promise<any> {
    try {
      // Fetch analytics from the analytics directory in the repo
      const response = await fetch(
        `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main/analytics/summary.json`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch analytics: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Error fetching analytics:', error)
      return null
    }
  }

  /**
   * Get recent reports
   */
  async getRecentReports(limit: number = 20): Promise<any[]> {
    try {
      const response = await fetch(
        `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main/analytics/recent-activity.json`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch recent reports: ${response.status}`)
      }
      
      const data = await response.json()
      return data.slice(0, limit)
    } catch (error) {
      console.error('Error fetching recent reports:', error)
      return []
    }
  }

  /**
   * Get issue type statistics
   */
  async getIssueTypeStats(): Promise<Record<string, number> | null> {
    try {
      const response = await fetch(
        `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main/analytics/issue-types.json`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch issue type stats: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Error fetching issue type stats:', error)
      return null
    }
  }

  /**
   * Get location statistics
   */
  async getLocationStats(): Promise<Record<string, number> | null> {
    try {
      const response = await fetch(
        `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main/analytics/locations.json`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch location stats: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Error fetching location stats:', error)
      return null
    }
  }

  /**
   * Get daily activity data
   */
  async getDailyActivity(): Promise<Record<string, number> | null> {
    try {
      const response = await fetch(
        `https://raw.githubusercontent.com/${this.repoOwner}/${this.repoName}/main/analytics/daily-activity.json`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch daily activity: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Error fetching daily activity:', error)
      return null
    }
  }

  /**
   * Get all GitHub issues directly
   */
  async getGitHubIssues(): Promise<any[]> {
    try {
      const response = await fetch(
        `https://api.github.com/repos/${this.repoOwner}/${this.repoName}/issues?state=all&per_page=100`
      )
      
      if (!response.ok) {
        throw new Error(`Failed to fetch issues: ${response.status}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error('Error fetching GitHub issues:', error)
      return []
    }
  }
}

// Export singleton instance
export const githubStorage = new GitHubStorageService()
