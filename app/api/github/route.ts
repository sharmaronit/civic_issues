import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { report } = await request.json()
    
    if (!process.env.GITHUB_TOKEN) {
      return NextResponse.json(
        { error: 'GitHub token not configured' },
        { status: 500 }
      )
    }

    // Convert report to GitHub issue format
    const issueData = {
      title: `${report.issueType} Report - ${report.locationText.split(',')[0]}`,
      body: [
        `**Issue Type:** ${report.issueType}`,
        `**Location:** ${report.locationText}`,
        `**Date:** ${new Date(report.capturedAt).toLocaleString('en-IN')}`,
        `**User ID:** ${report.userId || 'anonymous'}`,
        `**Report URL:** ${report.reportUrl}`,
        report.note ? `**Notes:** ${report.note}` : '',
        report.coords ? `**Coordinates:** ${report.coords.lat}, ${report.coords.lng}` : '',
        report.locationMapUrl ? `**Maps URL:** ${report.locationMapUrl}` : '',
        report.footerCreditName ? `**Credit:** ${report.footerCreditName}` : '',
        report.imageUrl ? `**Issue Image:** ${report.imageUrl}` : '',
        report.certificateUrl ? `**Certificate:** ${report.certificateUrl}` : '',
        '',
        '---',
        `*Generated by reportcard.fun on ${new Date().toLocaleString('en-IN')}*`
      ].filter(Boolean).join('\n'),
      labels: [
        report.issueType.toLowerCase().replace(/\s+/g, '-'),
        report.locationText.split(',')[0].toLowerCase().replace(/\s+/g, '-'),
        new Date(report.capturedAt).getFullYear().toString(),
        'civic-issue',
        'auto-generated'
      ]
    }

    // Create GitHub issue
    const response = await fetch(
      'https://api.github.com/repos/ScienceArtist/civic-issues-database/issues',
      {
        method: 'POST',
        headers: {
          'Authorization': `token ${process.env.GITHUB_TOKEN}`,
          'Content-Type': 'application/json',
          'User-Agent': 'reportcard.fun-civic-app'
        },
        body: JSON.stringify(issueData)
      }
    )

    if (!response.ok) {
      const errorData = await response.json()
      console.error('GitHub API error:', errorData)
      return NextResponse.json(
        { error: `GitHub API error: ${response.status}` },
        { status: response.status }
      )
    }

    const result = await response.json()
    
    return NextResponse.json({
      success: true,
      issueNumber: result.number,
      issueUrl: result.html_url,
      message: 'Civic issue reported successfully!'
    })

  } catch (error) {
    console.error('Error in GitHub API route:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
